---
import Footer from '@/components/Footer.astro'
import { Header } from '@/components/Header'

const {
  title = 'Home',
  description = "I'm Eric Clemmons, an engineering leader specializing in autonomous, outcome-driven remote teams with over 15 years of experience as an open-source JavaScript/Node.js developer focused on UX & DX.",
} = Astro.props
const { href, origin } = Astro.url
---

<html class="h-full antialiased" lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />

    <title>{[title, 'Eric Clemmons'].filter(Boolean).join(' / ')}</title>
    <meta name="description" content={description} />

    <meta
      property="og:title"
      content="Converting Next.js to Astro / Eric Clemmons"
    />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={href} />
    <meta property="og:locale" content="en_US" />
    <meta property="og:site_name" content="ericclemmons.com" />
    <meta
      property="og:image"
      content={`${origin}/api/og.png?title=${encodeURIComponent(title)}`}
    />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={href} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta
      property="twitter:image"
      content={`${origin}/api/og.png?title=${encodeURIComponent(title)}`}
    />
    <meta name="twitter:label1" content="Written by" />
    <meta name="twitter:data1" content="Eric Clemmons" />

    <script>
      let darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)')

      updateMode()
      darkModeMediaQuery.addEventListener(
        'change',
        updateModeWithoutTransitions
      )
      window.addEventListener('storage', updateModeWithoutTransitions)

      function updateMode() {
        let isSystemDarkMode = darkModeMediaQuery.matches
        let isDarkMode =
          window.localStorage.isDarkMode === 'true' ||
          (!('isDarkMode' in window.localStorage) && isSystemDarkMode)

        if (isDarkMode) {
          document.documentElement.classList.add('dark')
        } else {
          document.documentElement.classList.remove('dark')
        }

        if (isDarkMode === isSystemDarkMode) {
          delete window.localStorage.isDarkMode
        }
      }

      function disableTransitionsTemporarily() {
        document.documentElement.classList.add('[&_*]:!transition-none')
        window.setTimeout(() => {
          document.documentElement.classList.remove('[&_*]:!transition-none')
        }, 0)
      }

      function updateModeWithoutTransitions() {
        disableTransitionsTemporarily()
        updateMode()
      }
    </script>
    <link href="/favicon.png" rel="icon" type="image/png" />

    <style is:global>
      @keyframes appear {
        0% {
          transform: translateY(2rem);
          mask: linear-gradient(90deg, #000 25%, #000000e6 50%, #00000000) 150%
            0 / 400% no-repeat;
          opacity: 0.2;
        }
        100% {
          mask: linear-gradient(90deg, #000 25%, #000000e6 50%, #00000000) 0 /
            400% no-repeat;
          opacity: 1;
          transform: translateY(0);
        }
      }

      @keyframes burns {
        0% {
          opacity: 0;
          clip-path: inset(5%);
          filter: brightness(2);
          transform: scale(111.11%);
        }
        100% {
          opacity: 1;
          filter: brightness(1);
          clip-path: inset(0);
          transform: scale(1);
        }
      }

      @keyframes bloom {
        0% {
          opacity: 0;
          filter: brightness(1) blur(20px);
        }
        10% {
          opacity: 1;
          filter: brightness(2) blur(10px);
        }
        100% {
          opacity: 1;
          filter: brightness(1) blur(0);
        }
      }

      [data-appear],
      [astro-island] > * {
        animation-name: appear;
        animation-duration: 1s;
        animation-fill-mode: backwards;
        animation-delay: calc(var(--animation-index) * 0.1s);
      }

      img[data-appear] {
        animation-name: burns;
      }
    </style>
  </head>
  <body class="flex h-full flex-col bg-zinc-50 dark:bg-black">
    <div class="fixed inset-0 flex justify-center sm:px-8">
      <div class="flex w-full max-w-7xl lg:px-8">
        <div
          class="w-full bg-white ring-1 ring-zinc-100 dark:bg-zinc-900 dark:ring-zinc-300/20"
        >
        </div>
      </div>
    </div>
    <div class="relative">
      <Header client:visible />

      <main>
        <slot />
      </main>

      <Footer />
    </div>

    <script is:inline>
      const observer = new IntersectionObserver((entries, observer) => {
        entries
          .sort((a, b) => b.intersectionRatio - a.intersectionRatio)
          .forEach((entry, i) => {
            if (entry.isIntersecting) {
              entry.intersectionRatio
              entry.target.dataset.appear = ''
              entry.target.style.setProperty('--animation-index', i)

              observer.disconnect()
            }
          })
      })

      document
        .querySelector('main')
        .querySelectorAll('h1,h2,h3,h4,h5,h6,a,li,blockquote,p,time,img')
        .forEach((element) => observer.observe(element))
    </script>
  </body>
</html>
